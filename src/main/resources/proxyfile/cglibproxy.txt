package com.wuxi.aop;

import java.lang.reflect.Method;
import net.sf.cglib.core.ReflectUtils;
import net.sf.cglib.core.Signature;
import net.sf.cglib.proxy.Callback;
import net.sf.cglib.proxy.Factory;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;


cglib 创建某个类A的动态代理类的模式是：
1.   查找A上的所有非final的方法定义；
2.   将这些方法的定义转换成字节码；
3.   将组成的字节码转换成相应的代理的class对象；
4.   实现 MethodInterceptor接口，用来处理 对代理类上所有方法的请求（这个接口和JDK动态代理InvocationHandler的功能和角色是一样的）

public class 751c046a extends PerformanceImpl
  implements Factory
{
  private boolean CGLIB$BOUND;
  public static Object CGLIB$FACTORY_DATA;
  private static final ThreadLocal CGLIB$THREAD_CALLBACKS;
  private static final Callback[] CGLIB$STATIC_CALLBACKS;
  private MethodInterceptor CGLIB$CALLBACK_0;
  private static Object CGLIB$CALLBACK_FILTER;
  private static final Method CGLIB$add$0$Method;
  private static final MethodProxy CGLIB$add$0$Proxy;
  private static final Object[] CGLIB$emptyArgs;
  private static final Method CGLIB$remove$1$Method;
  private static final MethodProxy CGLIB$remove$1$Proxy;
  private static final Method CGLIB$check$2$Method;
  private static final MethodProxy CGLIB$check$2$Proxy;
  private static final Method CGLIB$equals$3$Method;
  private static final MethodProxy CGLIB$equals$3$Proxy;
  private static final Method CGLIB$toString$4$Method;
  private static final MethodProxy CGLIB$toString$4$Proxy;
  private static final Method CGLIB$hashCode$5$Method;
  private static final MethodProxy CGLIB$hashCode$5$Proxy;
  private static final Method CGLIB$clone$6$Method;
  private static final MethodProxy CGLIB$clone$6$Proxy;

  static void CGLIB$STATICHOOK2()
  {
    Class localClass2;
    CGLIB$THREAD_CALLBACKS = new ThreadLocal();
    CGLIB$emptyArgs = new Object[0];
    Class localClass1 = Class.forName("com.wuxi.aop.PerformanceImpl$$EnhancerByCGLIB$$751c046a");
    Method[] tmp71_68 = ReflectUtils.findMethods(new String[] { "add", "(I)V", "remove", "(I)V", "check", "(I)V" }, (localClass2 = Class.forName("com.wuxi.aop.PerformanceImpl")).getDeclaredMethods());
    CGLIB$add$0$Method = tmp71_68[0];
    CGLIB$add$0$Proxy = MethodProxy.create(localClass2, localClass1, "(I)V", "add", "CGLIB$add$0");
    Method[] tmp91_71 = tmp71_68;
    CGLIB$remove$1$Method = tmp91_71[1];
    CGLIB$remove$1$Proxy = MethodProxy.create(localClass2, localClass1, "(I)V", "remove", "CGLIB$remove$1");
    Method[] tmp111_91 = tmp91_71;
    CGLIB$check$2$Method = tmp111_91[2];
    CGLIB$check$2$Proxy = MethodProxy.create(localClass2, localClass1, "(I)V", "check", "CGLIB$check$2");
    tmp111_91;
    Method[] tmp192_189 = ReflectUtils.findMethods(new String[] { "equals", "(Ljava/lang/Object;)Z", "toString", "()Ljava/lang/String;", "hashCode", "()I", "clone", "()Ljava/lang/Object;" }, (localClass2 = Class.forName("java.lang.Object")).getDeclaredMethods());
    CGLIB$equals$3$Method = tmp192_189[0];
    CGLIB$equals$3$Proxy = MethodProxy.create(localClass2, localClass1, "(Ljava/lang/Object;)Z", "equals", "CGLIB$equals$3");
    Method[] tmp212_192 = tmp192_189;
    CGLIB$toString$4$Method = tmp212_192[1];
    CGLIB$toString$4$Proxy = MethodProxy.create(localClass2, localClass1, "()Ljava/lang/String;", "toString", "CGLIB$toString$4");
    Method[] tmp232_212 = tmp212_192;
    CGLIB$hashCode$5$Method = tmp232_212[2];
    CGLIB$hashCode$5$Proxy = MethodProxy.create(localClass2, localClass1, "()I", "hashCode", "CGLIB$hashCode$5");
    Method[] tmp252_232 = tmp232_212;
    CGLIB$clone$6$Method = tmp252_232[3];
    CGLIB$clone$6$Proxy = MethodProxy.create(localClass2, localClass1, "()Ljava/lang/Object;", "clone", "CGLIB$clone$6");
    tmp252_232;
    return;
  }

  final void CGLIB$add$0()
  {
    super.add(paramInt);
  }

  public final void add()
  {
    MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0;
    if (tmp4_1 == null)
    {
      tmp4_1;
      CGLIB$BIND_CALLBACKS(this);
    }
    if (this.CGLIB$CALLBACK_0 != null)
      return;
    super.add(paramInt);
  }

  final void CGLIB$remove$1()
  {
    super.remove(paramInt);
  }

  public final void remove()
  {
    MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0;
    if (tmp4_1 == null)
    {
      tmp4_1;
      CGLIB$BIND_CALLBACKS(this);
    }
    if (this.CGLIB$CALLBACK_0 != null)
      return;
    super.remove(paramInt);
  }

  final void CGLIB$check$2()
  {
    super.check(paramInt);
  }

  protected final void check()
  {
    MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0;
    if (tmp4_1 == null)
    {
      tmp4_1;
      CGLIB$BIND_CALLBACKS(this);
    }
    if (this.CGLIB$CALLBACK_0 != null)
      return;
    super.check(paramInt);
  }

  final boolean CGLIB$equals$3()
  {
    return super.equals(paramObject);
  }

  public final boolean equals()
  {
    MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0;
    if (tmp4_1 == null)
    {
      tmp4_1;
      CGLIB$BIND_CALLBACKS(this);
    }
    MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0;
    if (tmp17_14 == null)
      break label57;
    label50: label57: if (tmp17_14.intercept(this, CGLIB$equals$3$Method, new Object[] { paramObject }, CGLIB$equals$3$Proxy) != null)
      break label50;
  }

  final String CGLIB$toString$4()
  {
    return super.toString();
  }

  public final String toString()
  {
    MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0;
    if (tmp4_1 == null)
    {
      tmp4_1;
      CGLIB$BIND_CALLBACKS(this);
    }
    MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0;
    if (tmp17_14 != null)
      return ((String)tmp17_14.intercept(this, CGLIB$toString$4$Method, CGLIB$emptyArgs, CGLIB$toString$4$Proxy));
    return super.toString();
  }

  final int CGLIB$hashCode$5()
  {
    return super.hashCode();
  }

  public final int hashCode()
  {
    MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0;
    if (tmp4_1 == null)
    {
      tmp4_1;
      CGLIB$BIND_CALLBACKS(this);
    }
    MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0;
    if (tmp17_14 == null)
      break label52;
    label45: label52: if (tmp17_14.intercept(this, CGLIB$hashCode$5$Method, CGLIB$emptyArgs, CGLIB$hashCode$5$Proxy) != null)
      break label45;
  }

  final Object CGLIB$clone$6()
    throws CloneNotSupportedException
  {
    return super.clone();
  }

  protected final Object clone()
    throws CloneNotSupportedException
  {
    MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0;
    if (tmp4_1 == null)
    {
      tmp4_1;
      CGLIB$BIND_CALLBACKS(this);
    }
    MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0;
    if (tmp17_14 != null)
      return tmp17_14.intercept(this, CGLIB$clone$6$Method, CGLIB$emptyArgs, CGLIB$clone$6$Proxy);
    return super.clone();
  }

  public static MethodProxy CGLIB$findMethodProxy(Signature paramSignature)
  {
    String tmp4_1 = paramSignature.toString();
    switch (tmp4_1.hashCode())
    {
    case -1149925809:
      if (!(tmp4_1.equals("add(I)V")))
        break label161;
      label161: return CGLIB$add$0$Proxy;
    case -508378822:
    case 397240118:
    case 1097227442:
    case 1826985398:
    case 1913648695:
    case 1984935277:
    }
  }

  public static void CGLIB$SET_THREAD_CALLBACKS(Callback[] paramArrayOfCallback)
  {
    CGLIB$THREAD_CALLBACKS.set(paramArrayOfCallback);
  }

  public static void CGLIB$SET_STATIC_CALLBACKS(Callback[] paramArrayOfCallback)
  {
    CGLIB$STATIC_CALLBACKS = paramArrayOfCallback;
  }

  private static final void CGLIB$BIND_CALLBACKS(Object paramObject)
  {
    751c046a local751c046a = (751c046a)paramObject;
    if (local751c046a.CGLIB$BOUND)
      break label52;
    local751c046a.CGLIB$BOUND = true;
    Object tmp23_20 = CGLIB$THREAD_CALLBACKS.get();
    if (tmp23_20 != null)
      break label39;
    tmp23_20;
    Callback[] tmp31_28 = CGLIB$STATIC_CALLBACKS;
    if (tmp31_28 != null)
      break label39;
    tmp31_28;
    label39: label52: break label52:
  }

  public Object newInstance()
  {
    CGLIB$SET_THREAD_CALLBACKS(paramArrayOfCallback);
    CGLIB$SET_THREAD_CALLBACKS(null);
    return new 751c046a();
  }

  public Object newInstance()
  {
    CGLIB$SET_THREAD_CALLBACKS(new Callback[] { paramCallback });
    CGLIB$SET_THREAD_CALLBACKS(null);
    return new 751c046a();
  }

  public Object newInstance(, Object[] paramArrayOfObject, Callback[] paramArrayOfCallback)
  {
    CGLIB$SET_THREAD_CALLBACKS(paramArrayOfCallback);
    Class[] tmp9_8 = paramArrayOfClass;
    switch (tmp9_8.length)
    {
    case 0:
      tmp9_8;
      break;
    default:
      new 751c046a();
      throw new IllegalArgumentException("Constructor not found");
    }
    CGLIB$SET_THREAD_CALLBACKS(null);
  }

  public Callback getCallback()
  {
    CGLIB$BIND_CALLBACKS(this);
    switch (paramInt)
    {
    case 0:
    }
    return null;
  }

  public void setCallback(, Callback paramCallback)
  {
    switch (paramInt)
    {
    case 0:
      this.CGLIB$CALLBACK_0 = ((MethodInterceptor)paramCallback);
    }
  }

  public Callback[] getCallbacks()
  {
    CGLIB$BIND_CALLBACKS(this);
    return { this.CGLIB$CALLBACK_0 };
  }

  public void setCallbacks()
  {
    this.CGLIB$CALLBACK_0 = ((MethodInterceptor)paramArrayOfCallback[0]);
  }

  static
  {
    CGLIB$STATICHOOK2();
  }
}}